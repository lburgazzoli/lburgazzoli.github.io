<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservices on Luca Burgazzoli</title><link>https://lburgazzoli.github.io/tags/microservices/</link><description>Recent content in microservices on Luca Burgazzoli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 13 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://lburgazzoli.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>A camel running in the clouds (part 3)</title><link>https://lburgazzoli.github.io/posts/2017-10-13-a-camel-running-in-the-clouds-part-3/</link><pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2017-10-13-a-camel-running-in-the-clouds-part-3/</guid><description>In a micro-service/cloud oriented architecture it becomes increasingly important to provide a mechanism to detect unhealthy services and an idiomatic way is to provide an health endpoint [1]. Apache Camel 2.20.0 provides an experimental support footnoteref:officialdoc[Official camel Health Check documentation] to probe the state of a Camel integration through a dedicated set of APIs and endpoints.
Health Checks API The APIsfootnoteref:officialdoc[] are available in camel-core and belong to the package org.</description></item><item><title>A camel running in the clouds (part 2)</title><link>https://lburgazzoli.github.io/posts/2017-04-12-a-camel-running-in-the-clouds-part-2/</link><pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2017-04-12-a-camel-running-in-the-clouds-part-2/</guid><description>Meet Camel’s ServiceCall EIP The ServiceCall EIP has been introduced in Camel 2.18.0 to allows calling remote services in a distributed systems looking up informaton about the service to consume from external systems such as Kubernetes, Consul, Etcd or DNS. The ServiceCall EIP has been enhanced in Camel 2.19 to make it more extensible and easier to use.
ServiceCall Concepts The ServiceCall is based on common cloud-concepts:
service discovery to collect services definitions from external systems/registries.</description></item><item><title>A camel running in the clouds</title><link>https://lburgazzoli.github.io/posts/2016-12-21-a-camel-running-in-the-clouds/</link><pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2016-12-21-a-camel-running-in-the-clouds/</guid><description>Camel and Spring Boot Camel supports Spring Boot since Camel 2.15 but in the latest release we have improved Camel to make it a first class citizen of Spring Boot, some notables improvements available as of Camel 2.18 are:
spring boot starters
spring boot auto configuration
spring boot healt check
In Camel 2.19 we’ll furter improve the integration between Camel and Spring Boot and it will include support for Spring Cloud.</description></item><item><title>def µsvc = Fabric8.apply(karaf).andThen(camel)</title><link>https://lburgazzoli.github.io/posts/2016-10-24-def-svc-fabric8applykarafand-thencamel/</link><pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2016-10-24-def-svc-fabric8applykarafand-thencamel/</guid><description>Fabric8 is an amazing microservice platform which not only provide all the building blocks needed to effectively impement microservices but also a number of high quality open-source libraries and tools that every developer could leverage to ease the integration with Kubernetes/OpenShift.
Some of the bits fabric8 provides are:
OpenShift/Kubernetes Client
Spring Cloud Kubernetes
Fabric8 Karaf
Fabric8 Maven Plugin
As we are brave, we won’t talk about doing Microservices with Spring Boot but we’ll go with Apache Karaf and Apache Camel.</description></item></channel></rss>