<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Luca Burgazzoli</title><link>https://lburgazzoli.github.io/tags/go/</link><description>Recent content in Go on Luca Burgazzoli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lburgazzoli.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Camel alike routing engine written in GoLang pt. 1</title><link>https://lburgazzoli.github.io/posts/2024-05-21_an_apache_camel_alike_routing_engine_written_in_gom_part_1/</link><pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2024-05-21_an_apache_camel_alike_routing_engine_written_in_gom_part_1/</guid><description>I recently had some time to continue exploring how to combine some of the technologies I had on my radar for quite a while and I finally got something that - even if it is just a proof of concept / experiment - can finally be shown.
What we will go through in this post is:
Apache Camel alike routing engine written in GoLang Embedded WebAssembly engine for extensible and safe message routing and transformation Actors Model OCI Artifacts Notes: the result of this work is by no mean expected to land in the official Apache Camel project or in any Red Hat Integration product Background To get started, let’s have a basic understanding of the components/technologies we are going to mention in this post:</description></item></channel></rss>