<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scripting on Luca Burgazzoli</title><link>https://lburgazzoli.github.io/tags/scripting/</link><description>Recent content in scripting on Luca Burgazzoli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://lburgazzoli.github.io/tags/scripting/index.xml" rel="self" type="application/rss+xml"/><item><title>Adventures in GraalVM: polyglot Camel (k) native routes with Quarkus</title><link>https://lburgazzoli.github.io/posts/2019-03-28-adventures-in-graalvm-polyglot-camel-k-native-routes-with-quarkus/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2019-03-28-adventures-in-graalvm-polyglot-camel-k-native-routes-with-quarkus/</guid><description>The last blog i wrote[1] was about running integration code written in JavaScript from a Camel application compiled as native executable using SubstrateVM (part of the GraalVM project).
Has something happen since then ? I would say yes:
Camel K
Quarkus
Camel 3 development has finally started
As I’m involved in all the projects above, let see how they can play togheter to deliver a truly amazing cloud native experience.</description></item><item><title>Adventures in GraalVM: invoke Java code from JS in native-image</title><link>https://lburgazzoli.github.io/posts/2018-08-06-adventures-in-graalvm-invoke-java-code-from-js-in-native-image/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2018-08-06-adventures-in-graalvm-invoke-java-code-from-js-in-native-image/</guid><description>Thre’s a lot of interest about GraalVM’s native-image recently so I give it a try but instead of &amp;#34;just&amp;#34; trying to compile some java code to a native binary I went to the edge trying to make the native binary extensible via JavaScript.
In a Java application make some java objects available to the JS runtime is trivial and you only need to do something like:
try(Context context = Context.</description></item><item><title>Adventures in GraalVM: polyglot Camel routes with native-image</title><link>https://lburgazzoli.github.io/posts/2018-09-04-adventures-in-graalvm-polyglot-camel-routes-with-native-image/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2018-09-04-adventures-in-graalvm-polyglot-camel-routes-with-native-image/</guid><description>I’ve recently been playing with Camel to leverage JavaScript to define routes[1] and GraalVM to invoke JavaScript from a native image[2] so let’s try to make them working together!
As GraalVM as of RC6 does not (yet) support reflective access from scripting context back to Java world we need to use some proxy object GraalVM SDK provides, something like:
private Proxy createRouteDefinitionProxy(RouteDefinition def) { Map&amp;lt;String, Object&amp;gt; methods = new HashMap&amp;lt;&amp;gt;(); methods.</description></item></channel></rss>