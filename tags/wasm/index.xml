<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wasm on Luca Burgazzoli</title><link>https://lburgazzoli.github.io/tags/wasm/</link><description>Recent content in wasm on Luca Burgazzoli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lburgazzoli.github.io/tags/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Camel meets Wasm - Part 1</title><link>https://lburgazzoli.github.io/posts/2024-01-14_apache_camel_meets_wasm_part_1/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://lburgazzoli.github.io/posts/2024-01-14_apache_camel_meets_wasm_part_1/</guid><description>I recently stumbled upon a fascinating JavaAdvent article discussing a native WebAssembly runtime for the JVM called Chicory. Intrigued by the potential synergy between WebAssembly and Apache Camel, I decided to experiment with integrating them.
Background To get started, letâ€™s have a basic understanding of the components/technologies we are going to mention in this post:
Apache Camel is an open-source integration framework that provides a set of tools and patterns for facilitating the integration of various applications, systems, and technologies.</description></item></channel></rss>